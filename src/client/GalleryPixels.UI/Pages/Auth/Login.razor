@page "/Auth/Login"
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject ToastService ToastService

<div class="flex items-center h-screen w-full">
    <div class="w-full bg-surface dark:bg-surface-dark text-on-surface dark:text-on-surface-dark rounded shadow-lg p-8 m-4 md:max-w-sm md:mx-auto">
        <span class="block w-full text-xl uppercase font-bold mb-4">Login</span>
        <form @onsubmit="LoginAsync">
            <div class="mb-4 md:w-full">
                <label for="email" class="block text-xs mb-1">Username or Email</label>
                <input class="w-full border rounded p-2 outline-none focus:shadow-outline" type="email" name="email" id="email" placeholder="Username or Email" @bind="Email">
            </div>
            <div class="mb-6 md:w-full">
                <label for="password" class="block text-xs mb-1">Password</label>
                <input class="w-full border rounded p-2 outline-none focus:shadow-outline" type="password" name="password" id="password" placeholder="Password" @bind="Password">
            </div>

            <button class="bg-green-500 hover:bg-green-700 text-white uppercase text-sm font-semibold px-4 py-2 rounded">Login</button>

            <div id="message-box" class="text-red-500 text-sm mt-2" style="display: @(ShowMessage ? "block" : "none")">
                Invalid username or password
            </div>
        </form>
    </div>
</div>

@code {
    private string Email { get; set; } = string.Empty;
    private string Password { get; set; } = string.Empty;
    private bool ShowMessage { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        if (await AuthService.IsAuthenticated())
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task LoginAsync()
    {
        if (await AuthService.AuthenticateAsync(Email, Password))
        {
            ToastService.ShowSuccess("Logged in successfully");
            if (NavigationManager.Uri.Equals("/auth/login", StringComparison.InvariantCultureIgnoreCase))
            {
                ShowMessage = false;
                NavigationManager.NavigateTo("/");
            }
        }
        else
        {
            ShowMessage = true;
        }
    }

}