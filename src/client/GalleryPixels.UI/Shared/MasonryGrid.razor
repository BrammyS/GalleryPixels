@using GalleryPixels.UI.Masonry
@using GalleryPixels.UI.Domain.Services
@using GalleryPixels.UI.Domain.Models
@inject IImagePlaceHolderService ImageService
@inject IMagicGrid MagicGrid
@inject IResizeListener listener
@implements IDisposable

<div class="@MasonryGridId" style="width: 100% !important;">
    @foreach (var media in Media)
    {
        <div class="flex justify-center items-center max-w-3xl w-[100%] lg:w-[40%] 2xl:w-[25%] px-6 lg:px-0" @onclick="() => ShowModal(media)">
            <img class="lazyload rounded-md w-full object-contain cursor-pointer" data-src="@media.Url" width="@media.Width" height="@media.Height" alt="">
        </div>
    }
</div>

<!-- Img modal -->
<div class="@(_showModal && ModalImg != null ? "" : "hidden") fixed top-0 left-0 z-80 w-screen h-screen bg-black/70 flex justify-center items-center">
    <!--  Clickable close background -->
    <div class="fixed z-90 inset-0 transition-opacity cursor-pointer" @onclick="CloseModal"></div>

    <img class="object-contain @(ModalScale > 1 ? $"scale-[{ModalScale}]" : "") max-h-full max-w-full transform" src="@ModalImg?.Url" alt=""/>

    <!-- The close button -->
    <a class="fixed z-90 top-4 right-8 p-1 rounded-xl bg-surface/90 dark:bg-surface-dark/90 text-on-surface dark:text-on-surface-dark text-5xl font-bold cursor-pointer" @onclick="CloseModal">
        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-x">
            <line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line>
        </svg>
    </a>
</div>

@code
{
    private bool _showModal = false;
    private List<Media> Media { get; set; } = new();
    private string MasonryGridId { get; set; } = "masonry";
    private Media? ModalImg { get; set; }
    private float ModalScale { get; set; }
    private BrowserWindowSize? Window { get; set; }

    protected override void OnInitialized()
    {
        for (var i = 0; i < 100; i++)
        {
            Media.Add(ImageService.GetRandomImagePlaceHolder());
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await MagicGrid.InitAsync($".{MasonryGridId}", 30, Media.Count);

        if (firstRender)
        {
            listener.OnResized += WindowResized;
        }
    }

    private void ShowModal(Media media)
    {
        ModalImg = media;
        SetModalScale();
        _showModal = true;
    }

    private void SetModalScale()
    {
        if (Window == null || ModalImg == null)
            return;

        var scaleW = (float)Window.Width / ModalImg.Width;
        var scaleH = (float)Window.Height / ModalImg.Height;
        ModalScale = Math.Min(scaleH, scaleW);
        Console.WriteLine($"ModalScale: {ModalScale}");
    }

    private void CloseModal()
    {
        _showModal = false;
    }

    private void WindowResized(object _, BrowserWindowSize window)
    {
        Window = window;
        SetModalScale();
        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        listener.OnResized -= WindowResized;
    }
}