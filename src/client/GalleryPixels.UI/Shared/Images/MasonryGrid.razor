@using GalleryPixels.UI.Domain.Models
@using GalleryPixels.UI.Domain.Services
@using System.Globalization
@using GalleryPixels.UI.Application.Services
@inject IImagePlaceHolderService ImageService
@inject IMagicGrid MagicGrid
@inject IResizeListener Listener

<div class="@MasonryGridId" style="width: 100% !important;">
    @foreach (var media in Media)
    {
        <div class="flex justify-center items-center max-w-3xl w-[100%] md:w-[40%] 2xl:w-[25%] px-6 md:px-0"
             @onclick="() => ShowModal(media)">
            <!--suppress RequiredAttributes -->
            <img class="lazyload rounded-md w-full object-contain cursor-pointer transition-opacity duration-700" 
                 data-src="@media.Url" 
                 width="@media.Width" 
                 height="@media.Height" 
                 alt="">
        </div>
    }
</div>

@if (ModalImg is not null)
{
    <ImageModal @bind-ModalImg="ModalImg"/>
}

@code
{
    private string MasonryGridId { get; set; } = "masonry";
    private List<Media> Media { get; set; } = new();
    private Media? ModalImg { get; set; }

    protected override void OnInitialized()
    {
        for (var i = 0; i < 100; i++)
        {
            Media.Add(ImageService.GetRandomImagePlaceHolder());
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await MagicGrid.InitAsync($".{MasonryGridId}", 30, Media.Count);
    }

    private void ShowModal(Media media)
    {
        ModalImg = media;
    }
}