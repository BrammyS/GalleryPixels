@inject IResizeListener Listener
@using GalleryPixels.UI.Domain.Models
@using System.Globalization
@implements IDisposable

<!-- Img modal -->
<div class="@(ModalImg != null ? "" : "hidden") fixed top-0 left-0 z-80 w-screen h-screen bg-black/70 flex justify-center items-center">
    <!--  Clickable close background -->
    <div class="fixed z-90 inset-0 transition-opacity cursor-pointer" @onclick="CloseModal"></div>

    <img style="@(ModalScale > 1 ? GetScaleStyle() : string.Empty) @GetTranslatePos()"
         class="max-h-full max-w-full object-contain transform cursor-grab select-none drag-none @(_panning ? "cursor-grabbing" : string.Empty)"
         src="@ModalImg?.Url"
         alt=""
         draggable="false"
         @onmousedown="MouseDown"
         @onmousemove="MouseMove"
         @onmouseup="MouseUp"
         @ondblclick="OnDoubleClick"/>

    <!-- The close button -->
    <a class="fixed z-90 top-4 right-8 p-1 rounded-xl bg-surface/90 dark:bg-surface-dark/90 text-on-surface dark:text-on-surface-dark cursor-pointer"
       @onclick="CloseModal">
        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none"
             stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-14 md:w-12 lg:w-8 h-auto">
            <line x1="18" y1="6" x2="6" y2="18"></line>
            <line x1="6" y1="6" x2="18" y2="18"></line>
        </svg>
    </a>

    <!-- The zoom button -->
    <a class="fixed z-90 top-4 p-1 rounded-xl bg-surface/90 dark:bg-surface-dark/90 text-on-surface dark:text-on-surface-dark flex space-x-2 leading-none">
        <div class="cursor-pointer" @onclick="ZoomInClicked">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
                 stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-14 md:w-12 lg:w-8 h-auto">
                <circle cx="12" cy="12" r="10"></circle>
                <line x1="12" y1="8" x2="12" y2="16"></line>
                <line x1="8" y1="12" x2="16" y2="12"></line>
            </svg>
        </div>
        <span class="flex items-center font-bold text-5xl sm:text-4xl md:text-3xl lg:text-2xl h-auto">@((ModalScale * 100).ToString("0", NumberCultureInfo))%</span>
        <div class="cursor-pointer" @onclick="ZoomOutClicked">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
                 stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-14 md:w-12 lg:w-8 h-auto">
                <circle cx="12" cy="12" r="10"></circle>
                <line x1="8" y1="12" x2="16" y2="12"></line>
            </svg>
        </div>
    </a>
</div>

@code
{
    [Parameter, EditorRequired]
    public Media? ModalImg { get; set; }

    [Parameter]
    public EventCallback<Media?> ModalImgChanged { get; set; }

    private double ModalScale { get; set; }
    private BrowserWindowSize? Window { get; set; }
    private static readonly CultureInfo NumberCultureInfo = new("en-US");
    private double _mouseStartX, _mouseStartY, _translateX, _translateY, _previousTranslateX, _previousTranslateY;
    private bool _panning;

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender)
            return;

        Listener.OnResized += WindowResized;
        SetModalScale();
    }

    private void SetModalScale()
    {
        if (Window == null || ModalImg == null)
            return;

        var scaleW = Window.Width * 0.95 / ModalImg.Width;
        var scaleH = Window.Height * 0.95 / ModalImg.Height;

        ModalScale = Math.Min(scaleH, scaleW);

        if (ModalScale < 1)
            ModalScale = 1;
    }

    private Task CloseModal()
    {
        ModalImg = null;
        return ModalImgChanged.InvokeAsync(ModalImg);
    }

    private void WindowResized(object? _, BrowserWindowSize window)
    {
        Window = window;
        SetModalScale();
        StateHasChanged();
    }

    private void ZoomInClicked()
    {
        ZoomIn(0.25);
    }

    private void ZoomOutClicked()
    {
        ModalScale -= 0.25;

        if (ModalScale < 1)
            ModalScale = 1;
    }

    private string GetScaleStyle()
        => $"--tw-scale-x: {ModalScale.ToString(NumberCultureInfo)}; --tw-scale-y: {ModalScale.ToString(NumberCultureInfo)};";

    private string GetTranslatePos()
        => $"--tw-translate-x: {_translateX.ToString(NumberCultureInfo)}px; --tw-translate-y: {_translateY.ToString(NumberCultureInfo)}px;";

    private void MouseDown(MouseEventArgs mouseEvent)
    {
        if (_panning)
            return;

        _panning = true;
        _mouseStartX = mouseEvent.ClientX - _previousTranslateX;
        _mouseStartY = mouseEvent.ClientY - _previousTranslateY;
    }

    private void MouseMove(MouseEventArgs mouseEvent)
    {
        if (!_panning)
            return;

        var offsetX = mouseEvent.ClientX - _mouseStartX;
        var offsetY = mouseEvent.ClientY - _mouseStartY;

        _translateX = offsetX;
        _translateY = offsetY;
    }

    private void MouseUp(MouseEventArgs mouseEvent)
    {
        _panning = false;

        _previousTranslateX = _translateX;
        _previousTranslateY = _translateY;
    }

    private void OnDoubleClick(MouseEventArgs obj)
    {
        ZoomIn(1);
    }

    private void ZoomIn(double value)
    {
        ModalScale += value;

        if (ModalScale > 5)
            ModalScale = 5;
    }

    void IDisposable.Dispose()
    {
        Listener.OnResized -= WindowResized;
    }
}